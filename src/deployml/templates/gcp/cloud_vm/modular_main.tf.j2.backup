# Modular VM Deployment Template
# This template uses separate modules for each service instead of monolithic deployment

# Provider configuration
provider "google" {
  project = "{{ project_id }}"
  region  = "{{ region }}"
  zone    = "{{ zone }}"
}

# Enable required Google Cloud APIs for the project
resource "google_project_service" "required_apis" {
  for_each = toset([
    "compute.googleapis.com",                   # Compute Engine (VMs, disks, networks)
    "storage.googleapis.com",                   # Cloud Storage (artifact buckets)
    "iam.googleapis.com",                       # Identity and Access Management
    "iamcredentials.googleapis.com",            # IAM Service Account Credentials
    "logging.googleapis.com",                   # Cloud Logging
    "monitoring.googleapis.com",                # Cloud Monitoring
    "serviceusage.googleapis.com",              # Service Usage (for enabling APIs)
    "cloudresourcemanager.googleapis.com",     # Cloud Resource Manager (project operations)
    {% if any(tool.params.get('backend_store_uri', '').startswith('postgresql') for stage in stack for stage_name, tool in stage.items()) %}
    "sqladmin.googleapis.com",                  # Cloud SQL Admin API (for PostgreSQL)
    "sql-component.googleapis.com",             # Cloud SQL component API (for PostgreSQL)
    "servicenetworking.googleapis.com",         # For private service connections (for PostgreSQL)
    "cloudkms.googleapis.com",                  # For encryption keys (if using CMEK)
    {% endif %}
    {% if any(tool.name == 'feast' for stage in stack for stage_name, tool in stage.items()) %}
    "bigquery.googleapis.com",                  # BigQuery API (for Feast offline store)
    "datastore.googleapis.com",                 # Datastore API (for Feast online store option)
    "bigtable.googleapis.com",                  # Bigtable API (for Feast online store option)
    {% endif %}
  ])

  project = "{{ project_id }}"
  service = each.value
  disable_on_destroy = false
}

# Wait for API propagation
resource "time_sleep" "wait_for_api_propagation" {
  depends_on = [google_project_service.required_apis]
  create_duration = "120s"
}

# API readiness marker
resource "null_resource" "api_readiness_check" {
  depends_on = [time_sleep.wait_for_api_propagation]
  
  triggers = {
    api_wait_complete = timestamp()
  }
}

# Create Cloud SQL PostgreSQL instance if any service needs it
{% set needs_postgres = false %}
{% for stage in stack %}
  {% for stage_name, tool in stage.items() %}
    {% if tool.params.get('backend_store_uri', '').startswith('postgresql') %}
      {% set needs_postgres = true %}
    {% endif %}
  {% endfor %}
{% endfor %}

{% if needs_postgres %}
# Random password for the database
resource "random_password" "db_password" {
  length  = 16
  special = true
  override_special = "!#$*+-.=_"
}

# Cloud SQL PostgreSQL instance
resource "google_sql_database_instance" "postgres" {
  name             = "mlflow-postgres-{{ project_id }}"
  database_version = "POSTGRES_14"
  region           = "{{ region }}"
  project          = "{{ project_id }}"
  depends_on       = [null_resource.api_readiness_check]

  settings {
    tier = "db-f1-micro"
    ip_configuration {
      authorized_networks {
        value = "0.0.0.0/0"
      }
      ipv4_enabled = true
    }
  }

  deletion_protection = false
}

# Database for MLflow
resource "google_sql_database" "mlflow_db" {
  name     = "mlflow"
  instance = google_sql_database_instance.postgres.name
  project  = "{{ project_id }}"
  depends_on = [google_sql_database_instance.postgres]
}

# Database user for MLflow
resource "google_sql_user" "mlflow_user" {
  name     = "mlflow"
  instance = google_sql_database_instance.postgres.name
  password = random_password.db_password.result
  project  = "{{ project_id }}"
  depends_on = [google_sql_database_instance.postgres]
}

{% if any(tool.name == 'feast' for stage in stack for stage_name, tool in stage.items()) %}
# Separate database for FEAST
resource "google_sql_database" "feast_db" {
  name     = "feast"
  instance = google_sql_database_instance.postgres.name
  project  = "{{ project_id }}"
  depends_on = [google_sql_database_instance.postgres]
}

# Separate database user for FEAST
resource "google_sql_user" "feast_user" {
  name     = "feast"
  instance = google_sql_database_instance.postgres.name
  password = random_password.db_password.result
  project  = "{{ project_id }}"
  depends_on = [google_sql_database_instance.postgres]
}
{% endif %}
{% endif %}

# Deploy MLflow VM if requested
{% for stage in stack %}
  {% for stage_name, tool in stage.items() %}
    {% if tool.name == "mlflow" %}
module "mlflow_vm" {
  source = "./modules/mlflow/cloud/gcp/cloud_vm"
  
  project_id = "{{ project_id }}"
  region     = "{{ region }}"
  zone       = "{{ zone }}"
  
  # VM Configuration
  vm_name       = "{{ tool.params.vm_name }}"
  machine_type  = "{{ tool.params.machine_type }}"
  disk_size_gb  = {{ tool.params.disk_size_gb }}
  
  # MLflow Configuration
  mlflow_port = {{ tool.params.mlflow_port }}
  fastapi_port = {{ tool.params.get('fastapi_port', 8000) }}
  fastapi_app_source = "{{ tool.params.get('fastapi_app_source', 'template') }}"
  
  # Storage Configuration - get artifact_bucket from artifact_tracking stage
  {% set artifact_bucket = '' %}
  {% set create_bucket = false %}
  {% for artifact_stage in stack %}
    {% for artifact_stage_name, artifact_tool in artifact_stage.items() %}
      {% if artifact_stage_name == 'artifact_tracking' and artifact_tool.name == 'mlflow' %}
        {% set artifact_bucket = artifact_tool.params.get('artifact_bucket', '') %}
        {% set create_bucket = artifact_tool.params.get('create_bucket', false) %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  artifact_bucket = "{{ artifact_bucket }}"
  create_bucket   = {{ 'true' if create_bucket else 'false' }}
  
  # Database Configuration
  use_postgres = {{ 'true' if tool.params.get('backend_store_uri', '').startswith('postgresql') else 'false' }}
  db_password  = {% if needs_postgres %}random_password.db_password.result{% else %}""{% endif %}
  postgres_host = {% if needs_postgres %}google_sql_database_instance.postgres.public_ip_address{% else %}""{% endif %}
  
  # Access Control
  allow_public_access = {{ 'true' if tool.params.get('allow_public_access', true) else 'false' }}
  
  depends_on = [null_resource.api_readiness_check{% if needs_postgres %}, google_sql_database_instance.postgres, google_sql_database.mlflow_db, google_sql_user.mlflow_user{% endif %}]
}
    {% endif %}
  {% endfor %}
{% endfor %}

# Deploy Feast VM if requested (integrated with MLflow stage)
{% for stage in stack %}
  {% for stage_name, tool in stage.items() %}
    {% if stage_name == "feature_store" and tool.name == "feast" %}
module "feast_vm" {
  source = "./modules/feast/cloud/gcp/cloud_vm"
  
  project_id = "{{ project_id }}"
  region     = "{{ region }}"
  zone       = "{{ zone }}"
  
  # VM Configuration
  vm_name       = "{{ tool.params.service_name }}"
  machine_type  = "{{ tool.params.get('machine_type', 'e2-medium') }}"
  disk_size_gb  = {{ tool.params.get('disk_size_gb', 20) }}
  
  # Feast Configuration
  feast_port = {{ tool.params.feast_port }}
  registry_type = "{{ tool.params.get('registry_type', 'sql' if tool.params.get('backend_store_uri', '').startswith('postgresql') else 'file') }}"
  online_store_type = "{{ tool.params.get('online_store_type', 'postgres' if tool.params.get('backend_store_uri', '').startswith('postgresql') else 'sqlite') }}"
  offline_store_type = "{{ tool.params.get('offline_store_type', 'bigquery') }}"
  
  # Database Configuration
  use_postgres = {{ 'true' if tool.params.get('backend_store_uri', '').startswith('postgresql') else 'false' }}
  backend_store_uri = "{{ tool.params.get('backend_store_uri', '') }}"
  postgres_host = {% if needs_postgres %}google_sql_database_instance.postgres.public_ip_address{% else %}""{% endif %}
  postgres_port = "5432"
  postgres_database = {% if needs_postgres %}google_sql_database.feast_db.name{% else %}""{% endif %}
  postgres_user = {% if needs_postgres %}google_sql_user.feast_user.name{% else %}""{% endif %}
  postgres_password = {% if needs_postgres %}random_password.db_password.result{% else %}""{% endif %}
  
  # BigQuery Configuration
  bigquery_dataset = "{{ tool.params.get('bigquery_dataset', 'feast_offline_store') }}"
  create_bigquery_dataset = {{ 'true' if tool.params.get('create_bigquery_dataset', true) else 'false' }}
  sample_data = {{ 'true' if tool.params.get('sample_data', false) else 'false' }}
  
  depends_on = [null_resource.api_readiness_check{% if needs_postgres %}, google_sql_database_instance.postgres, google_sql_database.feast_db, google_sql_user.feast_user{% endif %}]
}
    {% endif %}
  {% endfor %}
{% endfor %}

# Outputs
{% for stage in stack %}
  {% for stage_name, tool in stage.items() %}
    {% if tool.name == "mlflow" %}
output "mlflow_vm_external_ip" {
  description = "External IP address of the MLflow VM"
  value       = module.mlflow_vm.vm_external_ip
}

output "mlflow_url" {
  description = "URL to access MLflow UI"
  value       = module.mlflow_vm.mlflow_url
}

output "fastapi_url" {
  description = "URL to access FastAPI proxy"
  value       = module.mlflow_vm.fastapi_url
}

output "mlflow_ssh_command" {
  description = "SSH command to connect to MLflow VM"
  value       = module.mlflow_vm.ssh_command
}
    {% endif %}
    
    {% if stage_name == "feature_store" and tool.name == "feast" %}
output "feast_vm_external_ip" {
  description = "External IP address of the Feast VM"
  value       = module.feast_vm.vm_external_ip
}

output "feast_url" {
  description = "URL to access Feast server"
  value       = module.feast_vm.feast_url
}

output "feast_grpc_url" {
  description = "Feast gRPC endpoint"
  value       = module.feast_vm.feast_grpc_url
}

output "feast_ssh_command" {
  description = "SSH command to connect to Feast VM"
  value       = module.feast_vm.ssh_command
}
    {% endif %}
  {% endfor %}
{% endfor %}

{% if needs_postgres %}
output "postgresql_credentials" {
  description = "PostgreSQL database credentials"
  value = {
    db_user                  = google_sql_user.mlflow_user.name
    db_password              = random_password.db_password.result
    db_name                  = google_sql_user.mlflow_user.name
    db_public_ip             = google_sql_database_instance.postgres.public_ip_address
    instance_connection_name = google_sql_database_instance.postgres.connection_name
    connection_string        = "postgresql+psycopg2://${google_sql_user.mlflow_user.name}:${random_password.db_password.result}@${google_sql_database_instance.postgres.public_ip_address}:5432/${google_sql_user.mlflow_user.name}"
  }
  sensitive = true
}

output "db_connection_string" {
  description = "PostgreSQL connection string"
  value       = "postgresql+psycopg2://${google_sql_user.mlflow_user.name}:${random_password.db_password.result}@${google_sql_database_instance.postgres.public_ip_address}:5432/${google_sql_user.mlflow_user.name}"
  sensitive = true
}
{% endif %}
